#include <iostream>

using namespace std;

int findP(int arr[],int s,int e){
    int pivotIndex = s;
    int pivotElement = arr[s];
    int count = 0;
    
    for(int i =s+1;i<=e;i++){
        if(arr[i]<=pivotElement){
            count++;
        }
    }
    int rightIndex = s + count;
    swap(arr[pivotIndex],arr[rightIndex]);
    pivotIndex = rightIndex;
    
    //now to check whether both sides are sorted or not
    int i = s;
    int j = e;
    
    while(i<pivotIndex && j>pivotIndex){
        while(arr[i]<pivotIndex){
            i++;
        }
        while(arr[j]>pivotIndex){
            j--;
        }
        
    }
    if(i<pivotIndex && j>pivotIndex)
        swap(arr[i],arr[j]);
    
    return pivotIndex;
    
}
void quickSort(int arr[],int s,int e){
    if(s>=e){
        return;
    }
    //finding pivot;
    int pivot = findP(arr,s,e);
    //just sort the left part
    quickSort(arr,s,pivot-1);
    quickSort(arr,pivot+1,e);
    
}

int main()
{
    int arr[]={4,5,9,7,8};
    int n = 5;
    int s = 0;
    int e = n-1;
    
    quickSort(arr,s,e);
    
    for(int i =0;i<n;i++){
       cout<<arr[i]<<" ";
    }
    cout<<endl;
    

    return 0;
}
