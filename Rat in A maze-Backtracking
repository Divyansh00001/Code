#include <iostream>
#include <vector>

using namespace std;

bool isSafe(int srcx,int srcy,int row,int col,int arr [3][3],vector<vector<bool>>&visited){
    if( ((srcx>=0 && srcx<row)&& (srcy>=0 && srcy<col))&& (arr[srcx][srcy]==1) && (visited[srcx][srcy]==false)){
       return true; 
    }
    else{
    return false;
    }
}

void riam(int arr[3][3],int row,int col,int srcx,int srcy, vector<vector<bool>>&visited,vector<string>&path,string output){
    //base case
    if(srcx== row-1 && srcy==col-1 ){
        path.push_back(output);
        return;
        
    }
    
    
    if(isSafe(srcx+1,srcy,row,col,arr,visited)){
        visited[srcx+1][srcy]=true;
        riam(arr,row,col,srcx+1,srcy,visited,path,output + 'D');
        visited[srcx+1][srcy]=false;
    }
    
    if(isSafe(srcx,srcy-1,row,col,arr,visited)){
        visited[srcx][srcy-1]=true;
        riam(arr,row,col,srcx,srcy-1,visited,path,output + 'L');
        visited[srcx][srcx-1]=false;
    }
    if(isSafe(srcx,srcy+1,row,col,arr,visited)){
        visited[srcx][srcy+1]=true;
        riam(arr,row,col,srcx,srcy+1,visited,path,output + 'R');
        visited[srcx][srcy+1]=false;
    }
    if(isSafe(srcx-1,srcy,row,col,arr,visited)){
        visited[srcx-1][srcy]=true;
        riam(arr,row,col,srcx-1,srcy,visited,path,output + 'U');
        visited[srcx-1][srcy]=false;
    }
    
}

int main()
{
    int arr[3][3]={{1,0,0},
                 {1,1,0},
                 {1,1,1}};
    int row = 3;
    int col = 3;
    vector<vector<bool>>visited(row,vector<bool>(col,false));
    visited[0][0]= true;
    vector<string> path;
    string output ="";
    
    riam(arr,row,col,0,0,visited,path,output);
    
    cout<<"printing result"<<endl;
    for(auto i:path){
        cout<<i<<" ";
    }
    cout<<endl;
  return 0;
}
