/******************************************************************************

Welcome to GDB Online.
GDB online is an online compiler and debugger tool for C, C++, Python, Java, PHP, Ruby, Perl,
C#, OCaml, VB, Swift, Pascal, Fortran, Haskell, Objective-C, Assembly, HTML, CSS, JS, SQLite, Prolog.
Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/
#include <iostream>

using namespace std;

bool isSafe(int arr[3][3],int row,int col,int srcx,int srcy,vector<vector<bool>&visited){
    if(visited[i][j]==0 && arr[i][j]==1 && srcx>=0 && srcx<=row && srcy>=0 && srcy<=col){
       return true; 
    }
    return false;
    
}

void riam(int arr[3][3],int row,int col,int srcx,int srcy, vector<vector<bool>&visited,vector<string>&path,string output){
    //base case
    if(srcx>0 && srcy<n-1 ){
        path.push_back(output);
        
    }
    
    
    if(isSafe(arr,row,col,srcx+1,srcy,visited)){
        visited[i+1][j]=true;
        riam(arr,row,col,srcx+1,srcy,visited,path,output + 'D');
        visited[i+1][j]=false;
    }
    
    if(isSafe(arr,row,col,srcx,srcy-1,visited)){
        visited[srcx][srcy-1]=true;
        riam(arr,row,col,srcx,srcy-1,visited,path,output + 'L');
        visited[srcx][srcx-1]=false;
    }
    if(isSafe(arr,row,col,srcx,srcy,visited)){
        visited[srcx][srcy+1]=true;
        riam(arr,row,col,srcx,srcy,visited,path,output + 'R');
        visited[srcx][srcy+1]=false;
    }
    if(isSafe(arr,row,col,srcx-1,srcy,visited)){
        visited[srcx-1][srcy]=true;
        riam(arr,row,col,srcx-1,srcy,visited,path,output + 'U');
        visited[srcx-1][srcy]=false;
    }
    
}

int main()
{
    int arr[3][3]={{1,0,0},
                 {1,1,0},
                 {1,1,1}}
    int row = 3;
    int col = 3;
    vector<vector<bool>visited(row,vector<bool>(col,false));
    visited[0][0]= true;
    vector<string> path;
    string output ="";
    
    riam(arr,row,col,0,0,visited,path,output);
    
    for(int i = 0;i<=path.size();i++){
        cout<<i<<endl;
    }

    return 0;
}
