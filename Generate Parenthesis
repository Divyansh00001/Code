class Solution {
public:
void solve(int open,int close,int n,vector<string>&ans,string output){
    //base case
    if(open==0 && close==0){
        ans.push_back(output);
        return;
    }
    //check when you want to enter opening bracket
    if(open>0){
        output.push_back('(');
        solve(open-1,close,n,ans,output);
        //backtrack
        output.pop_back();
    }

    //now check the condition for including closed bracket
    if(close>open){
        output.push_back(')');
        solve(open,close-1,n,ans,output);
        //backtrack
        output.pop_back();
    }

}


    vector<string> generateParenthesis(int n) {
        int open = n;
        int close = n;
        vector<string>ans;
        string output ="";
        solve(open,close,n,ans,output);
        return ans;
    }
};
